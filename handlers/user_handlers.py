import datetime
import html

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton

from data import config
from data.config import bot
from data.methods.tasks import tasks_database

from loguru import logger

import utils
from keyboards.user_keyboards import add_task_kb, update_task_kb

router = Router()


@router.message(Command('start', ignore_case=True))
async def start_handler(message: Message, state: FSMContext):
    await message.reply('''üìå –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–∞—à–∏—Ö –¥–µ–¥–ª–∞–π–Ω–∞—Ö –ø—Ä—è–º–æ –≤ –±–µ—Å–µ–¥–µ!

–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/–¥–æ–±–∞–≤–∏—Ç—å</code> –∏ —Å–ª–µ–¥—É–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.

–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É <code>/—Å–ø–∏—Å–æ–∫</code>. –ö–∞–∂–¥—ã–π –∏–∑ –Ω–∏—Ö —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –≤ –ø–æ—Ä—è–¥–∫–µ –Ω–∞–∏–º–µ–Ω—å—à–µ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –∫–æ–Ω—Ü–∞ —Å–¥–∞—á–∏ –∑–∞–¥–∞–Ω–∏—è.

–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ.
–ö –ø—Ä–∏–º–µ—Ä—É,
<i>–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: 1
–ó–∞–¥–∞–Ω–∏–µ: –ü—Ä–æ–µ–∫—Ç –ø–æ –º–∏–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–µ
–û–ø–∏—Å–∞–Ω–∏–µ: –í—ã—á–∏—Å–ª–∏—Ç—å 1+2</i>

–í –ø–∞–Ω–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã <code>/–∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä_–∑–∞–¥–∞–Ω–∏—è</code> (–∫ –ø—Ä–∏–º–µ—Ä—É, /–∏–∑–º–µ–Ω–∏—Ç—å 1) –∏–ª–∏ —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –∑–∞–¥–∞–Ω–∏–π.''',
                        parse_mode='HTML')


class AddTaskStates(StatesGroup):
    get_task_name = State()
    get_task_description = State()
    get_task_deadline = State()


@router.message(Command('–¥–æ–±–∞–≤–∏—Ç—å', ignore_case=True))
async def get_task_name_handler(message: Message, state: FSMContext):
    await state.clear()

    data = await state.get_data()

    keyboard = await add_task_kb(data)

    await message.reply('''üìñ –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π.

–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –≤ —Ç–æ–º –ø–æ—Ä—è–¥–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤–∞–º —É–¥–æ–±–Ω–æ.''',
                        parse_mode='HTML', reply_markup=keyboard)


@router.callback_query(lambda clb: clb.data == 'add_name')
async def add_task_name_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    keyboard = await add_task_kb(data)

    await callback.message.answer('''–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.''',
                                  parse_mode='HTML', reply_markup=keyboard)
    await callback.answer()
    await state.set_state(AddTaskStates.get_task_name)


@router.callback_query(lambda clb: clb.data == 'add_deadline')
async def add_task_deadline_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    keyboard = await add_task_kb(data)

    await callback.message.answer('''–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É <b>–¥–µ–¥–ª–∞–π–Ω–∞</b> –∑–∞–¥–∞—á–∏.

<b>–ö–∞–∫ –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å</b>: 
20.12.2023 = 20.12.2023 0:00
20.12.2023 23:59 = 20.12.2023 23:59 
–∑–∞–≤—Ç—Ä–∞ = –Ω—É, –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –∑–∞–≤—Ç—Ä–∞
—Å–µ–≥–æ–¥–Ω—è 23:59

üîé –ü—Ä–∏–º–µ—Ä: <i>20.12.2023 23:59</i>.''',
                                  parse_mode='HTML', reply_markup=keyboard)
    await callback.answer()
    await state.set_state(AddTaskStates.get_task_deadline)


@router.callback_query(lambda clb: clb.data == 'add_description')
async def add_task_desc_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    keyboard = await add_task_kb(data)

    await callback.message.answer('''–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–æ–ø–∏—Å–∞–Ω–∏–µ</b> –∑–∞–¥–∞—á–∏.

üîé –ü—Ä–∏–º–µ—Ä: <i>–†–∞—Å–ø–∏—Å–∞—Ç—å –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤, –∞ —Ç–∞–∫–∂–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É–Ω–∫—Ç –∫–∞–∂–¥–æ–º—É –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.</i>''',
                                  parse_mode='HTML', reply_markup=keyboard)
    await callback.answer()
    await state.set_state(AddTaskStates.get_task_description)


@router.message(AddTaskStates.get_task_name)
async def get_task_description_handler(message: Message, state: FSMContext):
    task_name = message.text

    if not 3 <= len(task_name) <= 150:
        await message.reply(
            'üö´ –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 150 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–±–ª—é–¥–∞–π—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.\n\n–í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.')
        return

    await message.reply(f'''‚úèÔ∏è –í—ã –≤–Ω–µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ: <i>{html.escape(task_name)}</i>''',
                        parse_mode='HTML')

    await state.update_data({"add_task_name": task_name})

    data = await state.get_data()

    if not ('add_task_description' in data and 'add_task_name' in data and 'add_task_deadline' in data):
        keyboard = await add_task_kb(data)

        await message.answer('''üìñ –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π.

            –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –≤ —Ç–æ–º –ø–æ—Ä—è–¥–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤–∞–º —É–¥–æ–±–Ω–æ.''',
                             parse_mode='HTML', reply_markup=keyboard)
        return

    name = data['add_task_name']
    description = data['add_task_description']
    data = data['add_task_deadline']

    task_id = await tasks_database.add(message.chat.id, name, description, "–∑–∞–¥–∞–Ω–∏–µ",
                                       int(datetime.datetime.strptime(data, '%d.%m.%Y %H:%M').timestamp()),
                                       message.from_user.username,
                                       int(datetime.datetime.now().timestamp()))

    keyboard = await update_task_kb(task_id)

    await message.answer(f'''‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ.

    –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: <code>{task_id}</code>

    –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{name}</b>
    –û–ø–∏—Å–∞–Ω–∏–µ: <b>{description}</b>

    ‚ùóÔ∏è –î–µ–¥–ª–∞–π–Ω: {datetime.datetime.strptime(data, '%d.%m.%Y %H:%M')}''',
                         parse_mode='HTML', reply_markup=keyboard)

    await state.clear()


@router.message(AddTaskStates.get_task_description)
async def get_task_deadline_handler(message: Message, state: FSMContext):
    task_description = message.text

    if not 3 <= len(task_description) <= 2048:
        await message.reply(
            'üö´ –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 2048 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–±–ª—é–¥–∞–π—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.\n\n–í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.')
        return

    await message.reply(f'''‚úèÔ∏è –í—ã –≤–Ω–µ—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ.''',
                        parse_mode='HTML')

    await state.update_data({"add_task_description": task_description})

    data = await state.get_data()

    if not ('add_task_description' in data and 'add_task_name' in data and 'add_task_deadline' in data):
        keyboard = await add_task_kb(data)

        await message.answer('''üìñ –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π.

            –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –≤ —Ç–æ–º –ø–æ—Ä—è–¥–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤–∞–º —É–¥–æ–±–Ω–æ.''',
                             parse_mode='HTML', reply_markup=keyboard)
        return

    name = data['add_task_name']
    description = data['add_task_description']
    data = data['add_task_deadline']

    task_id = await tasks_database.add(message.chat.id, name, description, "–∑–∞–¥–∞–Ω–∏–µ",
                                       int(datetime.datetime.strptime(data, '%d.%m.%Y %H:%M').timestamp()),
                                       message.from_user.username,
                                       int(datetime.datetime.now().timestamp()))

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data=f'change_task_param:{task_id}:name')],
        [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data=f'change_task_param:{task_id}:description')],
        [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω', callback_data=f'change_task_param:{task_id}:deadline_at')],
        [InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data=f'delete_task:{task_id}')],
    ])
    await message.answer(f'''‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ.

    –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: <code>{task_id}</code>

    –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{name}</b>
    –û–ø–∏—Å–∞–Ω–∏–µ: <b>{description}</b>

    ‚ùóÔ∏è –î–µ–¥–ª–∞–π–Ω: {datetime.datetime.strptime(data, '%d.%m.%Y %H:%M')}''',
                         parse_mode='HTML', reply_markup=keyboard)

    await state.clear()


@router.message(AddTaskStates.get_task_deadline)
async def get_task_deadline_handler(message: Message, state: FSMContext):
    task_deadline = message.text.lower()

    is_success, result = utils.convert_input_date(task_deadline)

    if not is_success:
        await message.reply(
            f'üö´ –ù–µ–≤–µ—Ä–Ω–æ –∑–∞–¥–∞–Ω–æ –≤—Ä–µ–º—è –¥–µ–¥–ª–∞–π–Ω–∞: {result}', parse_mode='HTML')
        return

    await state.update_data({"add_task_deadline": result})

    data = await state.get_data()

    if not ('add_task_description' in data and 'add_task_name' in data and 'add_task_deadline' in data):
        keyboard = await add_task_kb(data)

        await message.answer('''üìñ –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π.

        –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –≤ —Ç–æ–º –ø–æ—Ä—è–¥–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤–∞–º —É–¥–æ–±–Ω–æ.''',
                             parse_mode='HTML', reply_markup=keyboard)
        return

    name = data['add_task_name']
    description = data['add_task_description']
    data = data['add_task_deadline']

    task_id = await tasks_database.add(message.chat.id, name, description, "–∑–∞–¥–∞–Ω–∏–µ",
                                       int(datetime.datetime.strptime(data, '%d.%m.%Y %H:%M').timestamp()),
                                       message.from_user.username,
                                       int(datetime.datetime.now().timestamp()))

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data=f'change_task_param:{task_id}:name')],
        [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data=f'change_task_param:{task_id}:description')],
        [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω', callback_data=f'change_task_param:{task_id}:deadline_at')],
        [InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data=f'delete_task:{task_id}')],
    ])
    await message.answer(f'''‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ.

–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: <code>{task_id}</code>

–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{name}</b>
–û–ø–∏—Å–∞–Ω–∏–µ: <b>{description}</b>

‚ùóÔ∏è –î–µ–¥–ª–∞–π–Ω: {datetime.datetime.strptime(data, '%d.%m.%Y %H:%M')}''',
                         parse_mode='HTML', reply_markup=keyboard)

    await state.clear()


@router.message(
    lambda msg: msg is not None and (
            msg.text.startswith('/–∏–∑–º–µ–Ω–∏—Ç—å') or msg.text.startswith('/–∑–∞–¥–∞–Ω–∏–µ') or msg.text.startswith('/–∑ ')))
async def change_task_handler(message: Message, state: FSMContext):
    args = message.text.split()

    if len(args) != 2:
        await message.reply(
            f'üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/–∏–∑–º–µ–Ω–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π_–Ω–æ–º–µ—Ä_–∑–∞–¥–∞–Ω–∏—è</code>',
            parse_mode='HTML')
        return

    cmd, task_id = args

    if not task_id.isdigit():
        await message.reply(
            f'üö´ –ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –≤ —Å–µ–±—è —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/–∏–∑–º–µ–Ω–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π_–Ω–æ–º–µ—Ä_–∑–∞–¥–∞–Ω–∏—è</code>',
            parse_mode='HTML')
        return

    if not (await tasks_database.task_exists(task_id)):
        await message.reply(
            f'üö´ –ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥.', parse_mode='HTML')
        return

    if (await tasks_database.get_value(task_id, 'chat_id')) != message.chat.id:
        await message.reply(
            f'üö´ –ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥.', parse_mode='HTML')
        return

    if (await tasks_database.get_value(task_id, 'status')) == "—É–¥–∞–ª–µ–Ω–æ":
        await message.reply(
            f'üö´ –î–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –±—ã–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ.', parse_mode='HTML')
        return

    name = await tasks_database.get_value(task_id, 'name')
    description = await tasks_database.get_value(task_id, 'description')
    created_by = await tasks_database.get_value(task_id, 'created_by')
    created_at = await tasks_database.get_value(task_id, 'created_at')
    last_edited_by = await tasks_database.get_value(task_id, 'last_edited_by')
    last_edited_at = await tasks_database.get_value(task_id, 'last_edited_at')
    deadline = datetime.datetime.fromtimestamp(await tasks_database.get_value(task_id, 'deadline_at'))

    now = datetime.datetime.now()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data=f'change_task_param:{task_id}:name')],
        [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data=f'change_task_param:{task_id}:description')],
        [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω', callback_data=f'change_task_param:{task_id}:deadline_at')],
        [InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data=f'delete_task:{task_id}')],
    ])
    if not last_edited_at:
        await message.answer(f'''üè∑ –£–ù: <code>{task_id}</code>
<b>{html.escape(name)}</b>
{html.escape(description)}

<i>–î–æ–±–∞–≤–ª–µ–Ω @{created_by}, {datetime.datetime.fromtimestamp(created_at).strftime('%d.%m.%Y %H:%M')}</i>

–î–æ –∫–æ–Ω—Ü–∞ –¥–µ–¥–ª–∞–π–Ω–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {utils.seconds_to_string(int((deadline - now).seconds) + 24 * 60 * 60 * (deadline - now).days)} ({deadline.strftime('%d.%m.%Y %H:%M')})''',
                             parse_mode='HTML', reply_markup=keyboard)

        await state.clear()
    else:
        await message.answer(f'''üè∑ –£–ù: <code>{task_id}</code>
<b>{html.escape(name)}</b>
{html.escape(description)}

<i>–î–æ–±–∞–≤–ª–µ–Ω @{created_by}, {datetime.datetime.fromtimestamp(created_at).strftime('%d.%m.%Y %H:%M')}</i>
<i>–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª @{last_edited_by}, {datetime.datetime.fromtimestamp(last_edited_at).strftime('%d.%m.%Y %H:%M')}</i>

–î–æ –∫–æ–Ω—Ü–∞ –¥–µ–¥–ª–∞–π–Ω–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {utils.seconds_to_string(int((deadline - now).seconds) + 24 * 60 * 60 * (deadline - now).days)} ({deadline.strftime('%d.%m.%Y %H:%M')})''',
                             parse_mode='HTML', reply_markup=keyboard)


class ChangeParamStates(StatesGroup):
    get_new_value = State()


@router.callback_query(lambda clb: clb.data.startswith('change_task_param:'))
async def change_param_task_handler(clb: CallbackQuery, state: FSMContext):
    cmd, task_id, param_name = clb.data.split(':')
    task_id = int(task_id)
    display_names = {
        'name': '–Ω–∞–∑–≤–∞–Ω–∏–µ',
        'description': '–æ–ø–∏—Å–∞–Ω–∏–µ',
        'deadline_at': '–¥–µ–¥–ª–∞–π–Ω'
    }
    await state.update_data({"change_param_name": param_name, "change_task_id": task_id})
    await clb.answer()

    if param_name == 'deadline_at':
        await clb.message.answer(
            f'''–¢–µ–∫—É—â–µ–µ(/–∏–π) {display_names[param_name]}: <i>{html.escape(datetime.datetime.fromtimestamp(await tasks_database.get_value(task_id, param_name)).strftime('%d.%m.%Y %H:%M'))}</i>

        –ù–∞ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?''', parse_mode='HTML')
    else:
        await clb.message.answer(
            f'''–¢–µ–∫—É—â–µ–µ(/–∏–π) {display_names[param_name]}: <i>{html.escape(str(await tasks_database.get_value(task_id, param_name)))}</i>
    
    –ù–∞ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?''', parse_mode='HTML')
    await state.set_state(ChangeParamStates.get_new_value)


@router.message(ChangeParamStates.get_new_value)
async def get_param_task_handler(message: Message, state: FSMContext):
    new_val = message.text

    data = await state.get_data()
    task_id = data['change_task_id']
    param_name = data['change_param_name']

    if param_name == 'deadline_at':
        task_deadline = new_val

        is_success, result = utils.convert_input_date(task_deadline)

        if not is_success:
            await message.reply(
                f'üö´ –ù–µ–≤–µ—Ä–Ω–æ –∑–∞–¥–∞–Ω–æ –≤—Ä–µ–º—è –¥–µ–¥–ª–∞–π–Ω–∞: {result}.\n–í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑', parse_mode='HTML')
            return
        await tasks_database.set_deadline_at(task_id,
                                             int(datetime.datetime.strptime(result, '%d.%m.%Y %H:%M').timestamp()))
        await message.answer(
            f'''–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –¥–µ–¥–ª–∞–π–Ω –Ω–∞ <b>{html.escape(result)}</b>''', parse_mode='HTML')
        await state.clear()
        return

    display_names = {
        'name': '–Ω–∞–∑–≤–∞–Ω–∏–µ',
        'description': '–æ–ø–∏—Å–∞–Ω–∏–µ',
        'deadline_at': '–¥–µ–¥–ª–∞–π–Ω'
    }
    if param_name == 'name':
        await tasks_database.set_name(task_id, new_val)
    elif param_name == 'description':
        await tasks_database.set_description(task_id, new_val)

    await tasks_database.set_last_edited_by(task_id, message.from_user.username)
    await tasks_database.set_last_edited_at(task_id, int(datetime.datetime.now().timestamp()))

    await message.answer(
        f'''–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ <i>{display_names[param_name]}</i> –Ω–∞ <code>{new_val}</code>''', parse_mode='HTML')
    await state.clear()


@router.callback_query(lambda clb: clb.data.startswith('delete_task:'))
async def change_param_task_handler(clb: CallbackQuery, state: FSMContext):
    cmd, task_id = clb.data.split(':')

    task_id = int(task_id)

    if not (await tasks_database.task_exists(task_id)):
        await clb.message.answer("–î–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.")
        return
    created_by = (await tasks_database.get_value(task_id, 'created_by'))

    if created_by != clb.from_user.username:
        await clb.message.answer(f"–î–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ @{created_by}. –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ.")
        return
    await clb.answer()
    await tasks_database.set_status(task_id, '—É–¥–∞–ª–µ–Ω–æ')
    await clb.message.answer(f"–í—ã —É–¥–∞–ª–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ{task_id}.")


@router.message(F.text.startswith('/—Å–ø–∏—Å–æ–∫'))
async def change_task_handler(message: Message, state: FSMContext):
    args = message.text.split()

    if len(args) != 1:
        await message.reply(
            f'üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/—Å–ø–∏—Å–æ–∫<code>',
            parse_mode='HTML')
        return

    chat_tasks = await tasks_database.get_tasks_by_chat_id(message.chat.id)

    msg = '‚§µÔ∏è –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/–∑–∞–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π_–Ω–æ–º–µ—Ä</code>\n\n'
    now = datetime.datetime.now()
    for chat_task in chat_tasks:
        deadline = datetime.datetime.fromtimestamp(chat_task[5])
        msg += f'''[‚Ññ<b>{chat_task[0]}</b>] <b>{html.escape(chat_task[2])}</b>
‚ùóÔ∏è –î–æ –∫–æ–Ω—Ü–∞ –¥–µ–¥–ª–∞–π–Ω–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {utils.seconds_to_string(int((deadline - now).seconds) + 24 * 60 * 60 * (deadline - now).days)} ({deadline.strftime('%d.%m.%Y %H:%M')})
'''
    await message.answer(msg, parse_mode='HTML')
